function Loaded() {
    const Main = document.querySelector('div[contenteditable="true"]');
    if (Main) {
        injectButton();
        
        const observer = new MutationObserver(() => {
            if (document.querySelector('div[contenteditable="true"]')){
                injectButton();
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true,
        });
    } else {
        setTimeout(Loaded, 1000);
    }
}

function fetchEmailContent() {
    const emailSubject = document.querySelector("h2.hP")?.innerText.trim();
    const emailBody = document.querySelector(".ii.gt")?.innerText;
    console.log("Email Subject:", emailSubject);
    console.log("Email Body:", emailBody);
    
    return {
        subject: emailSubject,
        body: emailBody
    };
}

function injectResponse(response){

    const textSpace = document.querySelector(".Am.aiL");
    
    if (!textSpace) return;
    duplicate = document.querySelector("#bolt-response")
    if (duplicate){
        duplicate.innerHTML = "";
    }

    textSpace.innerHTML = "";

    const pre = document.createElement("pre");
    pre.id = "bolt-response";
    pre.style.fontSize = "14px";
    pre.style.fontFamily = "Arial, sans-serif";
    pre.innerHTML = response.trim() + "\n\n" + "<b> >>> This response was generated by Bolt.Py </b>";
    textSpace.appendChild(pre);

    console.log("Response injected:", response);
}

function injectButton() {
    const Main = document.querySelector("div[role='region']");
    if (!Main) return;

    if (Main.querySelector("#bolt-button")) return;

    const div = document.createElement("div");
    div.id = "div";
    div.style.display = "flex";
    div.style.flexDirection = "column";
    div.style.alignItems = "center";

    const button = document.createElement("button");
    button.id = "bolt-button";
    button.textContent = "AI Response";
    Object.assign(button.style, {
        padding: "12px 18px",
        marginTop: "10px",
        background: "#1a73e8",
        color: "white",
        fontSize: "14px",
        fontWeight: "bold",
        border: "none",
        borderRadius: "8px",
        cursor: "pointer",
        boxShadow: "0 4px 8px rgba(0, 0, 0, 0.15)",
        transition: "background 0.3s ease, transform 0.2s ease",
    });

    button.onmouseenter = () => {
        button.style.background = "#155ab6";
        button.style.transform = "scale(1.05)";
    };
    button.onmouseleave = () => {
        button.style.background = "#1a73e8";
        button.style.transform = "scale(1)";
    };

    const loader = document.createElement("div");
    loader.id = "bolt-loader";
    loader.style.display = "none";
    loader.style.border = "6px solid #f3f3f3";
    loader.style.borderTop = "6px solid #3498db";
    loader.style.borderRadius = "50%";
    loader.style.width = "25px";
    loader.style.height = "25px";
    loader.style.marginTop = "10px";
    loader.style.animation = "spin 1s linear infinite";

    div.appendChild(button);
    div.appendChild(loader);
    Main.appendChild(div);

    if (!document.querySelector("#bolt-style")) {
        const style = document.createElement("style");
        style.id = "bolt-style";
        style.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }`;
        document.head.appendChild(style);
    }

    button.addEventListener('click', async function () {
        console.log("Button clicked!");
        const data = await fetchEmailContent();

        loader.style.display = "block";

        fetch('https://bolt-6usx.onrender.com/analyze-label', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(async response => {
            let data;
            try {
                data = await response.json();
            } catch (e) {
                throw new Error("Server did not return valid JSON.");
            }

            if (!response.ok) {
                throw new Error(data.Error);
            }

            console.log('API Response:', data.result);
            await injectResponse(data.output);
        })
        .catch(error => {
            console.error('API Error:', error);
            alert('ERROR GENERATING RESPONSE: ' + error.message);
        })
        .finally(() => {
            loader.style.display = "none";
        });
    });
}


Loaded();